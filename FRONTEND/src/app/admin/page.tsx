"use client"

import React from "react"
import { motion, useScroll, useTransform, useSpring } from "framer-motion"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import {
    Check,
    X,
    AlertTriangle,
    Clock,
    Eye,
    Shield,
    Activity,
    TrendingUp,
    Users,
    MapPin,
    Wind,
    Waves,
    Droplets,
    Mountain,
    Calendar,
    FileText,
    ChevronRight,
    Loader2,
    RefreshCw,
    Filter,
    Search,
    ChevronDown,
    Zap,
    Flame,
    Target
} from "lucide-react"
import { useState, useMemo } from "react"
import { useKindeBrowserClient } from "@kinde-oss/kinde-auth-nextjs"
import ProfileDropdown from "@/components/auth/ProfileDropdown"
import { useTRPC } from "@/trpc/client"
import { useQuery, useMutation } from "@tanstack/react-query"

type Alert = {
    id: number
    type: string
    severity: string
    status: string
    title: string
    description: string
    region: string
    state: string
    coordinates?: any
    predictionData?: any
    mlPrediction: number
    thresholdMet: boolean
    autoGenerated: boolean
    createdAt: Date | string
    updatedAt: Date | string
    approvedAt?: Date | string | null
    sentAt?: Date | string | null
    reviewNotes?: string | null
    reviewedBy?: {
        id: number | string
        firstName: string
        lastName: string
        role: string
    } | null
    reviewedById?: number | null
}

const staggerContainer = {
    hidden: { opacity: 0 },
    visible: {
        opacity: 1,
        transition: {
            staggerChildren: 0.1,
            delayChildren: 0.05
        }
    }
}

const alertTypeIcons = {
    CYCLONE: Wind,
    STORM_SURGE: Waves,
    WATER_POLLUTION: Droplets,
    COASTAL_EROSION: Mountain,
}

const severityColors = {
    MODERATE: "bg-gradient-to-r from-yellow-500/20 to-amber-500/20 text-yellow-300 border-yellow-500/40 shadow-lg shadow-yellow-500/10",
    HIGH: "bg-gradient-to-r from-orange-500/20 to-red-500/20 text-orange-300 border-orange-500/40 shadow-lg shadow-orange-500/10",
    EXTREME: "bg-gradient-to-r from-red-500/20 to-pink-500/20 text-red-300 border-red-500/40 shadow-lg shadow-red-500/10"
}

const severityConfig = {
    MODERATE: {
        label: "Moderate",
        icon: Target,
        gradient: "from-yellow-500 to-amber-500",
        hoverGradient: "hover:from-yellow-400 hover:to-amber-400",
        description: "Standard risk level"
    },
    HIGH: {
        label: "High",
        icon: Zap,
        gradient: "from-orange-500 to-red-500",
        hoverGradient: "hover:from-orange-400 hover:to-red-400",
        description: "Elevated risk level"
    },

}

const typeColors = {
    CYCLONE: "text-blue-400",
    STORM_SURGE: "text-cyan-400",
    WATER_POLLUTION: "text-green-400",
    COASTAL_EROSION: "text-orange-400"
}

const typeConfig = {
    CYCLONE: {
        label: "Cyclone",
        icon: Wind,
        gradient: "from-blue-500 to-indigo-500",
        hoverGradient: "hover:from-blue-400 hover:to-indigo-400",
        description: "Tropical storm system"
    },
    STORM_SURGE: {
        label: "Storm Surge",
        icon: Waves,
        gradient: "from-cyan-500 to-blue-500",
        hoverGradient: "hover:from-cyan-400 hover:to-blue-400",
        description: "Coastal flooding event"
    },
    WATER_POLLUTION: {
        label: "Water Pollution",
        icon: Droplets,
        gradient: "from-green-500 to-emerald-500",
        hoverGradient: "hover:from-green-400 hover:to-emerald-400",
        description: "Water quality threat"
    },
    COASTAL_EROSION: {
        label: "Coastal Erosion",
        icon: Mountain,
        gradient: "from-orange-500 to-amber-500",
        hoverGradient: "hover:from-orange-400 hover:to-amber-400",
        description: "Shoreline degradation"
    }
}

export default function AdminPage() {
    const { scrollYProgress } = useScroll()
    const { isAuthenticated, isLoading } = useKindeBrowserClient()

    const [selectedAlert, setSelectedAlert] = useState<any>(null)
    const [reviewNotes, setReviewNotes] = useState("")
    const [activeTab, setActiveTab] = useState<'pending' | 'generated' | 'approved'>('generated')

    // Filter states
    const [severityFilter, setSeverityFilter] = useState<string[]>([])
    const [typeFilter, setTypeFilter] = useState<string[]>([])
    const [searchTerm, setSearchTerm] = useState("")

    // Optimized parallax transforms
    const y1 = useTransform(scrollYProgress, [0, 1], [0, -50])
    const y2 = useTransform(scrollYProgress, [0, 1], [0, -100])
    const y3 = useTransform(scrollYProgress, [0, 1], [0, -150])

    const springY1 = useSpring(y1, { stiffness: 50, damping: 20, restDelta: 0.01 })
    const springY2 = useSpring(y2, { stiffness: 50, damping: 20, restDelta: 0.01 })
    const springY3 = useSpring(y3, { stiffness: 50, damping: 20, restDelta: 0.01 })

    const trpc = useTRPC()

    // tRPC queries using queryOptions pattern
    const { data: generatedAlerts, isLoading: loadingGenerated, refetch: refetchGenerated } = useQuery({
        ...trpc.alerts.getGeneratedAlerts.queryOptions({
            limit: 50
        }),
        enabled: !!isAuthenticated
    })

    const { data: pendingAlerts, isLoading: loadingPending, refetch: refetchPending } = useQuery({
        ...trpc.alerts.getPendingAlerts.queryOptions({
            limit: 50
        }),
        enabled: !!isAuthenticated
    })

    const { data: approvedAlerts, isLoading: loadingApproved, refetch: refetchApproved } = useQuery({
        ...trpc.alerts.getApprovedAlerts.queryOptions({
            limit: 50
        }),
        enabled: !!isAuthenticated
    })

    const { data: alertStats, refetch: refetchStats } = useQuery({
        ...trpc.alerts.getAlertStats.queryOptions(),
        refetchInterval: 30000, // Refetch every 30 seconds
        enabled: !!isAuthenticated
    })

    // Mutations using mutationOptions pattern
    const approveAlert = useMutation({
        ...trpc.alerts.approveAlert.mutationOptions(),
        onSuccess: () => {
            refetchGenerated()
            refetchPending()
            refetchApproved()
            refetchStats()
            setSelectedAlert(null)
            setReviewNotes("")
        }
    })

    const rejectAlert = useMutation({
        ...trpc.alerts.rejectAlert.mutationOptions(),
        onSuccess: () => {
            refetchGenerated()
            refetchPending()
            refetchApproved()
            refetchStats()
            setSelectedAlert(null)
            setReviewNotes("")
        }
    })

    // Background orbs
    const memoizedBackgroundOrbs = useMemo(() => (
        <>
            <motion.div
                className="absolute top-1/4 left-1/4 w-[400px] h-[400px] bg-gradient-to-r from-blue-400/20 to-cyan-500/15 rounded-full blur-3xl"
                style={{ y: springY1 }}
                animate={{
                    x: [0, 50, -25, 0],
                    scale: [1, 1.2, 0.9, 1],
                }}
                transition={{
                    duration: 15,
                    repeat: Infinity,
                    ease: "easeInOut",
                }}
            />
            <motion.div
                className="absolute top-3/4 right-1/4 w-[350px] h-[350px] bg-gradient-to-l from-cyan-500/20 to-blue-600/10 rounded-full blur-3xl"
                style={{ y: springY2 }}
                animate={{
                    x: [0, -60, 30, 0],
                    scale: [1, 0.8, 1.1, 1],
                }}
                transition={{
                    duration: 18,
                    repeat: Infinity,
                    ease: "easeInOut",
                    delay: 2,
                }}
            />
            <motion.div
                className="absolute top-1/2 left-1/2 w-[250px] h-[250px] bg-gradient-to-tr from-teal-400/15 to-blue-500/8 rounded-full blur-2xl"
                style={{ y: springY3 }}
                animate={{
                    x: [0, 40, -40, 0],
                    scale: [1, 1.3, 0.8, 1],
                }}
                transition={{
                    duration: 12,
                    repeat: Infinity,
                    ease: "easeInOut",
                    delay: 4,
                }}
            />
        </>
    ), [springY1, springY2, springY3])

    const handleApprove = (alertId: number) => {
        approveAlert.mutate({
            alertId,
            reviewNotes
        });
        // get the user for the that notfication
        
    }

    const handleReject = (alertId: number) => {
        if (!reviewNotes.trim()) {
            alert("Please provide review notes for rejection")
            return
        }
        rejectAlert.mutate({
            alertId,
            reviewNotes
        })
    }

    const formatDate = (date: string | Date) => {
        const d = new Date(date)
        return d.toLocaleDateString('en-US', {
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        })
    }

    const formatFullDate = (date: string | Date) => {
        const d = new Date(date)
        return d.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        })
    }

    const getCurrentAlerts = () => {
        let alerts: Alert[] = []
        switch (activeTab) {
            case 'pending':
                alerts = pendingAlerts?.alerts || []
                break
            case 'generated':
                alerts = generatedAlerts?.alerts || []
                break
            case 'approved':
                alerts = approvedAlerts?.alerts || []
                break
            default:
                alerts = []
        }

        // Apply filters
        return alerts.filter(alert => {
            // Severity filter
            if (severityFilter.length > 0 && !severityFilter.includes(alert.severity)) {
                return false
            }

            // Type filter
            if (typeFilter.length > 0 && !typeFilter.includes(alert.type)) {
                return false
            }

            // Search filter
            if (searchTerm) {
                const searchLower = searchTerm.toLowerCase()
                return (
                    alert.title.toLowerCase().includes(searchLower) ||
                    alert.description.toLowerCase().includes(searchLower) ||
                    alert.region.toLowerCase().includes(searchLower) ||
                    alert.state.toLowerCase().includes(searchLower)
                )
            }

            return true
        })
    }

    const toggleSeverityFilter = (severity: string) => {
        setSeverityFilter(prev =>
            prev.includes(severity)
                ? prev.filter(s => s !== severity)
                : [...prev, severity]
        )
    }

    const toggleTypeFilter = (type: string) => {
        setTypeFilter(prev =>
            prev.includes(type)
                ? prev.filter(t => t !== type)
                : [...prev, type]
        )
    }

    const clearAllFilters = () => {
        setSeverityFilter([])
        setTypeFilter([])
        setSearchTerm("")
    }

    const setHighPriorityFilter = () => {
        setSeverityFilter(['HIGH', 'EXTREME'])
        setTypeFilter([])
    }

    const getCurrentLoading = () => {
        switch (activeTab) {
            case 'pending':
                return loadingPending
            case 'generated':
                return loadingGenerated
            case 'approved':
                return loadingApproved
            default:
                return false
        }
    }

    if (isLoading) {
        return (
            <div className="min-h-screen bg-[#020E0E] flex items-center justify-center">
                <div className="text-blue-400 flex items-center gap-3">
                    <Loader2 className="h-6 w-6 animate-spin" />
                    <span>Loading...</span>
                </div>
            </div>
        )
    }

    if (!isAuthenticated) {
        return (
            <div className="min-h-screen bg-[#020E0E] flex items-center justify-center">
                <Card className="bg-blue-400/5 backdrop-blur-xl border-blue-400/20 p-8 text-center">
                    <div className="text-blue-400 mb-4">
                        <Shield className="h-12 w-12 mx-auto" />
                    </div>
                    <h2 className="text-2xl font-bold text-white mb-4">Admin Access Required</h2>
                    <p className="text-white/80 mb-6">Please log in with admin credentials to access this page.</p>
                    <Button
                        onClick={() => window.location.href = '/auth/login'}
                        className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white hover:from-cyan-500 hover:to-blue-500"
                    >
                        Login
                    </Button>
                </Card>
            </div>
        )
    }

    return (
        <div className="min-h-screen relative overflow-hidden bg-[#020E0E]">
            {/* Background */}
            <div className="fixed inset-0 -z-10">
                <div className="absolute inset-0 bg-gradient-to-br from-[#020E0E] via-blue-900/20 to-[#020E0E]" />
                {memoizedBackgroundOrbs}

                {/* Floating particles */}
                {[...Array(3)].map((_, i) => (
                    <motion.div
                        key={i}
                        className="absolute w-1 h-1 bg-blue-400/50 rounded-full"
                        style={{
                            left: `${25 + i * 25}%`,
                            top: `${35 + i * 15}%`,
                        }}
                        animate={{
                            y: [0, -50, 0],
                            opacity: [0, 0.8, 0],
                            scale: [0, 1, 0],
                        }}
                        transition={{
                            duration: 3 + i,
                            repeat: Infinity,
                            delay: i * 0.8,
                            ease: "easeInOut"
                        }}
                    />
                ))}
            </div>

            {/* Header */}
            <motion.header
                className="relative z-10 p-6"
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8 }}
            >
                <nav className="flex justify-between items-center max-w-7xl mx-auto">
                    <motion.div
                        className="text-2xl font-bold text-blue-400 relative"
                        whileHover={{ scale: 1.03 }}
                        transition={{ type: "spring", stiffness: 300, damping: 20 }}
                    >
                        Admin Dashboard
                        <motion.div
                            className="absolute -inset-2 bg-blue-400/15 rounded-lg blur-sm -z-10"
                            animate={{ opacity: [0.3, 0.5, 0.3] }}
                            transition={{ duration: 2, repeat: Infinity }}
                        />
                    </motion.div>

                    <div className="flex items-center gap-4">
                        <Button
                            onClick={() => {
                                refetchGenerated()
                                refetchPending()
                                refetchApproved()
                                refetchStats()
                            }}
                            variant="outline"
                            className="border-blue-400/30 text-blue-400 hover:bg-blue-400/10"
                        >
                            <RefreshCw className="h-4 w-4 mr-2" />
                            Refresh
                        </Button>
                        <ProfileDropdown />
                    </div>
                </nav>
            </motion.header>

            {/* Main Content */}
            <motion.div
                className="relative z-10 px-6 py-8 max-w-7xl mx-auto"
                initial="hidden"
                animate="visible"
                variants={staggerContainer}
            >
                {/* Stats Overview */}
                <motion.div
                    className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8"
                    initial={{ opacity: 0, y: 30 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6 }}
                >
                    {[
                        {
                            title: "Generated Alerts",
                            value: alertStats?.totalGenerated || 0,
                            icon: AlertTriangle,
                            color: "text-blue-400",
                            bg: "from-blue-400/20 to-cyan-400/10"
                        },
                        {
                            title: "Pending Review",
                            value: alertStats?.pendingApproval || 0,
                            icon: Clock,
                            color: "text-yellow-400",
                            bg: "from-yellow-400/20 to-orange-400/10"
                        },
                        {
                            title: "Approved",
                            value: alertStats?.totalApproved || 0,
                            icon: Check,
                            color: "text-green-400",
                            bg: "from-green-400/20 to-emerald-400/10"
                        },
                        {
                            title: "Last 24 Hours",
                            value: alertStats?.last24Hours || 0,
                            icon: TrendingUp,
                            color: "text-cyan-400",
                            bg: "from-cyan-400/20 to-blue-400/10"
                        }
                    ].map((stat, index) => (
                        <motion.div
                            key={stat.title}
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ delay: index * 0.1 }}
                            whileHover={{ y: -5, scale: 1.02 }}
                        >
                            <Card className={`bg-gradient-to-br ${stat.bg} backdrop-blur-xl border-blue-400/20 p-6 relative overflow-hidden`}>
                                <div className="flex items-center justify-between">
                                    <div>
                                        <p className="text-white/60 text-sm mb-1">{stat.title}</p>
                                        <p className={`text-3xl font-bold ${stat.color}`}>{stat.value}</p>
                                    </div>
                                    <stat.icon className={`h-8 w-8 ${stat.color}`} />
                                </div>
                            </Card>
                        </motion.div>
                    ))}
                </motion.div>

                {/* Tab Navigation */}
                <motion.div
                    className="flex gap-4 mb-8"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: 0.2 }}
                >
                    {[
                        { key: 'generated', label: 'Generated Alerts', count: alertStats?.totalGenerated || 0 },
                        { key: 'pending', label: 'Pending Review', count: alertStats?.pendingApproval || 0 },
                        { key: 'approved', label: 'Approved', count: alertStats?.totalApproved || 0 }
                    ].map((tab) => (
                        <Button
                            key={tab.key}
                            onClick={() => setActiveTab(tab.key as any)}
                            variant={activeTab === tab.key ? "default" : "outline"}
                            className={`${activeTab === tab.key
                                ? "bg-gradient-to-r from-blue-500 to-cyan-500 text-white"
                                : "border-blue-400/30 text-blue-400 hover:bg-blue-400/10"
                                } relative`}
                        >
                            {tab.label}
                            {tab.count > 0 && (
                                <Badge className="ml-2 bg-white/20 text-white text-xs">
                                    {tab.count}
                                </Badge>
                            )}
                        </Button>
                    ))}
                </motion.div>

                {/* Filters Section */}
                <motion.div
                    className="bg-gradient-to-br from-blue-400/5 to-cyan-400/5 backdrop-blur-xl border border-blue-400/20 rounded-lg p-6 mb-8"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: 0.3 }}
                >
                    <div className="flex flex-col lg:flex-row gap-6 items-start lg:items-center flex-wrap">

                        {/* Severity Filter */}
                        <div className="flex flex-col gap-3">
                            <label className="text-white/80 text-sm font-semibold flex items-center gap-2">
                                <AlertTriangle className="h-4 w-4 text-blue-400" />
                                Severity Levels
                            </label>
                            <div className="flex gap-3">
                                {Object.entries(severityConfig).map(([severity, config]) => {
                                    const IconComponent = config.icon
                                    const isActive = severityFilter.includes(severity)
                                    return (
                                        <motion.div
                                            key={severity}
                                            whileHover={{ scale: 1.05 }}
                                            whileTap={{ scale: 0.95 }}
                                        >
                                            <Button
                                                onClick={() => toggleSeverityFilter(severity)}
                                                className={`
                                                    relative overflow-hidden px-4 py-3 rounded-xl transition-all duration-300 group
                                                    ${isActive
                                                        ? `bg-gradient-to-r ${config.gradient} text-white shadow-lg shadow-${severity === 'EXTREME' ? 'red' : severity === 'HIGH' ? 'orange' : 'yellow'}-500/25`
                                                        : `bg-white/5 text-white/70 border border-white/10 ${config.hoverGradient} hover:text-white hover:border-white/20`
                                                    }
                                                `}
                                            >
                                                <div className="flex items-center gap-2 relative z-10">
                                                    <IconComponent className="h-4 w-4" />
                                                    <span className="font-medium">{config.label}</span>
                                                </div>
                                                {!isActive && (
                                                    <div className={`absolute inset-0 bg-gradient-to-r ${config.gradient} opacity-0 group-hover:opacity-20 transition-opacity duration-300`} />
                                                )}
                                            </Button>
                                        </motion.div>
                                    )
                                })}
                            </div>
                        </div>

                        {/* Type Filter */}
                        <div className="flex flex-col gap-3">
                            <label className="text-white/80 text-sm font-semibold flex items-center gap-2">
                                <Filter className="h-4 w-4 text-blue-400" />
                                Threat Types
                            </label>
                            <div className="flex gap-3">
                                {Object.entries(typeConfig).map(([type, config]) => {
                                    const IconComponent = config.icon
                                    const isActive = typeFilter.includes(type)
                                    return (
                                        <motion.div
                                            key={type}
                                            whileHover={{ scale: 1.05 }}
                                            whileTap={{ scale: 0.95 }}
                                        >
                                            <Button
                                                onClick={() => toggleTypeFilter(type)}
                                                className={`
                                                    relative overflow-hidden px-4 py-3 rounded-xl transition-all duration-300 group
                                                    ${isActive
                                                        ? `bg-gradient-to-r ${config.gradient} text-white shadow-lg`
                                                        : `bg-white/5 text-white/70 border border-white/10 ${config.hoverGradient} hover:text-white hover:border-white/20`
                                                    }
                                                `}
                                            >
                                                <div className="flex items-center gap-2 relative z-10">
                                                    <IconComponent className="h-4 w-4" />
                                                    <span className="font-medium">{config.label}</span>
                                                </div>
                                                {!isActive && (
                                                    <div className={`absolute inset-0 bg-gradient-to-r ${config.gradient} opacity-0 group-hover:opacity-20 transition-opacity duration-300`} />
                                                )}
                                            </Button>
                                        </motion.div>
                                    )
                                })}
                            </div>
                        </div>

                        {/* Quick Actions */}
                        <div className="flex flex-col gap-3">
                            <label className="text-white/80 text-sm font-semibold flex items-center gap-2">
                                <Zap className="h-4 w-4 text-blue-400" />
                                Quick Actions
                            </label>
                            <div className="flex gap-3">    
                                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                                    <Button
                                        onClick={clearAllFilters}
                                        className="bg-white/5 text-white/70 border border-white/10 hover:bg-white/10 hover:text-white hover:border-white/20 px-4 py-3 rounded-xl transition-all duration-300"
                                    >
                                        <div className="flex items-center gap-2">
                                            <RefreshCw className="h-4 w-4" />
                                            <span className="font-medium">Clear All</span>
                                        </div>
                                    </Button>
                                </motion.div>
                            </div>
                        </div>
                    </div>

                    {/* Active Filters Display */}
                    {(severityFilter.length > 0 || typeFilter.length > 0 || searchTerm) && (
                        <motion.div
                            className="mt-6 pt-6 border-t border-blue-400/20"
                            initial={{ opacity: 0, y: 10 }}
                            animate={{ opacity: 1, y: 0 }}
                        >
                            <div className="flex flex-wrap gap-3 items-center">
                                <span className="text-white/80 text-sm font-medium flex items-center gap-2">
                                    <Filter className="h-4 w-4 text-blue-400" />
                                    Active filters:
                                </span>
                                {severityFilter.map(severity => {
                                    const config = severityConfig[severity as keyof typeof severityConfig]
                                    return (
                                        <motion.div
                                            key={severity}
                                            initial={{ scale: 0 }}
                                            animate={{ scale: 1 }}
                                            whileHover={{ scale: 1.05 }}
                                        >
                                            <Badge
                                                className={`${severityColors[severity as keyof typeof severityColors]} cursor-pointer px-3 py-1 rounded-full flex items-center gap-1 transition-all hover:shadow-lg`}
                                                onClick={() => toggleSeverityFilter(severity)}
                                            >
                                                {React.createElement(config.icon, { className: "h-3 w-3" })}
                                                {config.label} ×
                                            </Badge>
                                        </motion.div>
                                    )
                                })}
                                {typeFilter.map(type => {
                                    const config = typeConfig[type as keyof typeof typeConfig]
                                    return (
                                        <motion.div
                                            key={type}
                                            initial={{ scale: 0 }}
                                            animate={{ scale: 1 }}
                                            whileHover={{ scale: 1.05 }}
                                        >
                                            <Badge
                                                className="bg-gradient-to-r from-blue-500/20 to-cyan-500/20 text-blue-300 border border-blue-500/40 cursor-pointer px-3 py-1 rounded-full flex items-center gap-1 transition-all hover:shadow-lg shadow-blue-500/10"
                                                onClick={() => toggleTypeFilter(type)}
                                            >
                                                {React.createElement(config.icon, { className: "h-3 w-3" })}
                                                {config.label} ×
                                            </Badge>
                                        </motion.div>
                                    )
                                })}
                                {searchTerm && (
                                    <motion.div
                                        initial={{ scale: 0 }}
                                        animate={{ scale: 1 }}
                                        whileHover={{ scale: 1.05 }}
                                    >
                                        <Badge
                                            className="bg-gradient-to-r from-green-500/20 to-emerald-500/20 text-green-300 border border-green-500/40 cursor-pointer px-3 py-1 rounded-full flex items-center gap-1 transition-all hover:shadow-lg shadow-green-500/10"
                                            onClick={() => setSearchTerm("")}
                                        >
                                            <Search className="h-3 w-3" />
                                            Search: "{searchTerm}" ×
                                        </Badge>
                                    </motion.div>
                                )}
                            </div>
                        </motion.div>
                    )}
                </motion.div>

                {/* Alerts List */}
                <motion.div
                    className="grid grid-cols-1 lg:grid-cols-5 gap-6"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ duration: 0.6, delay: 0.4 }}
                >
                    {/* Alerts Grid */}
                    <div className="lg:col-span-3 space-y-4">
                        {/* Results Counter */}
                        <div className="flex items-center justify-between mb-4">
                            <div className="text-white/60 text-sm">
                                {getCurrentAlerts().length} alerts found
                                {(severityFilter.length > 0 || typeFilter.length > 0 || searchTerm) && (
                                    <span className="text-blue-400 ml-1">(filtered)</span>
                                )}
                            </div>
                            <div className="flex items-center gap-2">
                                <Filter className="h-4 w-4 text-blue-400" />
                                <span className="text-blue-400 text-sm">
                                    {severityFilter.length + typeFilter.length + (searchTerm ? 1 : 0)} filters active
                                </span>
                            </div>
                        </div>

                        {/* Scrollable Alerts Container */}
                        <ScrollArea className="h-[70vh] pr-4">
                            <div className="space-y-4">
                                {getCurrentLoading() ? (
                                    <div className="flex items-center justify-center py-12">
                                        <Loader2 className="h-8 w-8 animate-spin text-blue-400" />
                                    </div>
                                ) : getCurrentAlerts().length === 0 ? (
                                    <Card className="bg-blue-400/5 backdrop-blur-xl border-blue-400/20 p-8 text-center">
                                        <div className="text-blue-400 mb-4">
                                            <AlertTriangle className="h-12 w-12 mx-auto" />
                                        </div>
                                        <h3 className="text-xl font-semibold text-white mb-2">
                                            {(severityFilter.length > 0 || typeFilter.length > 0 || searchTerm)
                                                ? "No Alerts Match Your Filters"
                                                : "No Alerts Found"
                                            }
                                        </h3>
                                        <p className="text-white/60">
                                            {(severityFilter.length > 0 || typeFilter.length > 0 || searchTerm)
                                                ? "Try adjusting your filters to see more results."
                                                : "No alerts in this category at the moment."
                                            }
                                        </p>
                                        {(severityFilter.length > 0 || typeFilter.length > 0 || searchTerm) && (
                                            <Button
                                                onClick={clearAllFilters}
                                                variant="outline"
                                                className="mt-4 border-blue-400/30 text-blue-400 hover:bg-blue-400/10"
                                            >
                                                Clear All Filters
                                            </Button>
                                        )}
                                    </Card>
                                ) : (
                                    getCurrentAlerts().map((alert: Alert, index: number) => {
                                        const IconComponent = alertTypeIcons[alert.type as keyof typeof alertTypeIcons]
                                        return (
                                            <motion.div
                                                key={alert.id}
                                                initial={{ opacity: 0, x: -20 }}
                                                animate={{ opacity: 1, x: 0 }}
                                                transition={{ delay: index * 0.05 }}
                                                whileHover={{ x: 1, scale: 0.95 }}
                                            >
                                                <Card
                                                    className={`bg-gradient-to-br from-blue-400/10 to-cyan-400/5 backdrop-blur-xl border-blue-400/20 p-6 cursor-pointer transition-all duration-300 relative ${selectedAlert?.id === alert.id ? 'border-blue-400/50 bg-blue-400/15 ring-2 ring-blue-400/30' : 'hover:border-blue-400/40'
                                                        }`}
                                                    onClick={() => setSelectedAlert(alert)}
                                                >
                                                    <div className="flex items-start justify-between mb-4">
                                                        <div className="flex items-center gap-3">
                                                            <div className={`p-2 rounded-lg bg-blue-400/10 ${typeColors[alert.type as keyof typeof typeColors]}`}>
                                                                <IconComponent className="h-5 w-5" />
                                                            </div>
                                                            <div className="min-w-0 flex-1">
                                                                <h3 className="text-lg font-semibold text-white truncate">{alert.title}</h3>
                                                                <p className="text-white/60 text-sm truncate">{alert.region}, {alert.state}</p>
                                                            </div>
                                                        </div>
                                                        <Badge className={severityColors[alert.severity as keyof typeof severityColors]}>
                                                            {alert.severity}
                                                        </Badge>
                                                    </div>

                                                    <p className="text-white/80 text-sm mb-4 line-clamp-3">{alert.description}</p>

                                                    <div className="flex items-center justify-between text-sm text-white/60">
                                                        <div className="flex items-center gap-2">
                                                            <Calendar className="h-4 w-4" />
                                                            {formatDate(alert.createdAt)}
                                                        </div>
                                                        <div className="flex items-center gap-2">
                                                            <Activity className="h-4 w-4" />
                                                            ML: {Math.round(alert.mlPrediction * 100)}%
                                                        </div>
                                                    </div>

                                                    {selectedAlert?.id === alert.id && (
                                                        <motion.div
                                                            className="absolute right-4 top-1/2 -translate-y-1/2"
                                                            initial={{ opacity: 0, scale: 0 }}
                                                            animate={{ opacity: 1, scale: 1 }}
                                                        >
                                                            <ChevronRight className="h-5 w-5 text-blue-400" />
                                                        </motion.div>
                                                    )}
                                                </Card>
                                            </motion.div>
                                        )
                                    })
                                )}
                            </div>
                        </ScrollArea>
                    </div>

                    {/* Alert Details Panel */}
                    <div className="lg:col-span-2 sticky top-6">
                        <ScrollArea className="h-[70vh]">
                            {selectedAlert ? (
                                <motion.div
                                    initial={{ opacity: 0, x: 20 }}
                                    animate={{ opacity: 1, x: 0 }}
                                    transition={{ duration: 0.4 }}
                                    className="pr-4"
                                >
                                    <Card className="bg-gradient-to-br from-blue-400/10 to-cyan-400/5 backdrop-blur-xl border-blue-400/20 p-4 md:p-6">
                                        <div className="flex flex-col sm:flex-row items-start gap-3 mb-6">
                                            <div className={`p-3 rounded-lg bg-blue-400/10 ${typeColors[selectedAlert.type as keyof typeof typeColors]} flex-shrink-0`}>
                                                {React.createElement(alertTypeIcons[selectedAlert.type as keyof typeof alertTypeIcons], { className: "h-6 w-6" })}
                                            </div>
                                            <div className="flex-1 min-w-0">
                                                <h2 className="text-lg md:text-xl lg:text-2xl font-bold text-white break-words">{selectedAlert.title}</h2>
                                                <p className="text-white/60 text-sm break-words">{selectedAlert.type.replace('_', ' ')}</p>
                                            </div>
                                            <Badge className={`${severityColors[selectedAlert.severity as keyof typeof severityColors]} text-xs md:text-sm flex-shrink-0`}>
                                                {selectedAlert.severity}
                                            </Badge>
                                        </div>

                                        <div className="space-y-4 md:space-y-6 mb-4 md:mb-6">
                                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                <div className="min-w-0">
                                                    <label className="text-white/60 text-xs md:text-sm font-medium block mb-1">Location</label>
                                                    <div className="flex items-start gap-2">
                                                        <MapPin className="h-4 w-4 text-white/60 flex-shrink-0 mt-0.5" />
                                                        <span className="text-white text-sm break-words">{selectedAlert.region}, {selectedAlert.state}</span>
                                                    </div>
                                                </div>
                                                <div className="min-w-0">
                                                    <label className="text-white/60 text-xs md:text-sm font-medium block mb-1">ML Confidence</label>
                                                    <div className="flex items-center gap-2">
                                                        <div className="flex-1 bg-blue-400/20 rounded-full h-2">
                                                            <div
                                                                className="bg-blue-400 h-2 rounded-full transition-all duration-300"
                                                                style={{ width: `${selectedAlert.mlPrediction * 100}%` }}
                                                            />
                                                        </div>
                                                        <span className="text-white text-xs md:text-sm font-medium flex-shrink-0">{Math.round(selectedAlert.mlPrediction * 100)}%</span>
                                                    </div>
                                                </div>
                                            </div>

                                            <div className="min-w-0">
                                                <label className="text-white/60 text-xs md:text-sm font-medium block mb-2">Description</label>
                                                <div className="bg-blue-400/5 rounded-lg p-3 border border-blue-400/10">
                                                    <p className="text-white/80 text-sm leading-relaxed break-words whitespace-pre-wrap">{selectedAlert.description}</p>
                                                </div>
                                            </div>

                                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                <div className="min-w-0">
                                                    <label className="text-white/60 text-xs md:text-sm font-medium block mb-1">Created</label>
                                                    <p className="text-white text-xs md:text-sm break-words">{formatFullDate(selectedAlert.createdAt)}</p>
                                                </div>
                                                <div className="min-w-0">
                                                    <label className="text-white/60 text-xs md:text-sm font-medium block mb-1">Status</label>
                                                    <Badge className="bg-blue-500/20 text-blue-400 border-blue-500/30 text-xs">
                                                        {selectedAlert.status.replace('_', ' ')}
                                                    </Badge>
                                                </div>
                                            </div>
                                        </div>

                                        {activeTab === 'generated' && (
                                            <div className="space-y-4 border-t border-blue-400/20 pt-4 md:pt-6">
                                                <div className="min-w-0">
                                                    <label className="text-white/60 text-xs md:text-sm font-medium block mb-2">Review Notes</label>
                                                    <textarea
                                                        value={reviewNotes}
                                                        onChange={(e) => setReviewNotes(e.target.value)}
                                                        className="w-full p-3 bg-blue-400/10 border border-blue-400/20 rounded-lg text-white placeholder-white/40 focus:border-blue-400/50 focus:outline-none resize-none text-sm"
                                                        placeholder="Add notes about this alert..."
                                                        rows={3}
                                                    />
                                                </div>

                                                <div className="flex flex-col sm:flex-row gap-3">
                                                    <Button
                                                        onClick={() => handleApprove(selectedAlert.id)}
                                                        disabled={approveAlert.isPending}
                                                        className="flex-1 bg-gradient-to-r from-green-500 to-emerald-500 text-white hover:from-emerald-500 hover:to-green-500 text-sm py-2"
                                                    >
                                                        {approveAlert.isPending ? (
                                                            <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                                                        ) : (
                                                            <Check className="h-4 w-4 mr-2" />
                                                        )}
                                                        Approve
                                                    </Button>
                                                    <Button
                                                        onClick={() => handleReject(selectedAlert.id)}
                                                        disabled={rejectAlert.isPending}
                                                        variant="outline"
                                                        className="flex-1 border-red-400/30 text-red-400 hover:bg-red-400/10 text-sm py-2"
                                                    >
                                                        {rejectAlert.isPending ? (
                                                            <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                                                        ) : (
                                                            <X className="h-4 w-4 mr-2" />
                                                        )}
                                                        Reject
                                                    </Button>
                                                </div>
                                            </div>
                                        )}

                                        {selectedAlert.reviewedBy && (
                                            <div className="mt-4 md:mt-6 pt-4 md:pt-6 border-t border-blue-400/20">
                                                <label className="text-white/60 text-xs md:text-sm font-medium block mb-2">Review Information</label>
                                                <div className="bg-blue-400/5 rounded-lg p-3 border border-blue-400/10">
                                                    <p className="text-white font-medium text-sm break-words">{selectedAlert.reviewedBy.firstName} {selectedAlert.reviewedBy.lastName}</p>
                                                    <p className="text-white/60 text-xs break-words">{selectedAlert.reviewedBy.role}</p>
                                                    {selectedAlert.reviewNotes && (
                                                        <div className="mt-2">
                                                            <p className="text-white/80 text-xs md:text-sm italic break-words whitespace-pre-wrap">"{selectedAlert.reviewNotes}"</p>
                                                        </div>
                                                    )}
                                                </div>
                                            </div>
                                        )}
                                    </Card>
                                </motion.div>
                            ) : (
                                <Card className="bg-gradient-to-br from-blue-400/10 to-cyan-400/5 backdrop-blur-xl border-blue-400/20 p-6 md:p-8 text-center">
                                    <div className="text-blue-400 mb-4">
                                        <Eye className="h-10 md:h-12 w-10 md:w-12 mx-auto" />
                                    </div>
                                    <h3 className="text-lg md:text-xl font-semibold text-white mb-2">Select an Alert</h3>
                                    <p className="text-white/60 text-sm md:text-base">Click on an alert to view details and take action.</p>
                                    {getCurrentAlerts().length > 0 && (
                                        <div className="mt-4 text-xs md:text-sm text-white/40">
                                            {getCurrentAlerts().length} alerts available
                                        </div>
                                    )}
                                </Card>
                            )}
                        </ScrollArea>
                    </div>
                </motion.div>
            </motion.div>
        </div>
    )
}
