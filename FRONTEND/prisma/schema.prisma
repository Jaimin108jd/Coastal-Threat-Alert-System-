// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  NORMAL
  ADMIN
}

model User {
  id             Int            @id @default(autoincrement())
  kindeId        String         @unique
  email          String         @unique
  firstName      String
  lastName       String
  phone          String?
  city           String?
  state          String?
  role           Role           @default(NORMAL)
  isOnBoarded    Boolean        @default(false)
  subscriptions  Subscription[]
  reviewedAlerts Alert[]        @relation("AlertReviewer")
}

model Subscription {
  id        Int      @id @default(autoincrement())
  state     String
  city      String? // Optional city for more specific alerts
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@unique([userId, state, city])
  @@index([state, city, active])
}

enum AlertType {
  CYCLONE
  STORM_SURGE
  COASTAL_EROSION
  WATER_POLLUTION
}

enum AlertSeverity {
  LOW
  MODERATE
  HIGH
  EXTREME
}

enum AlertStatus {
  GENERATED
  PENDING_APPROVAL
  APPROVED
  REJECTED
  SENT
}

model Alert {
  id             Int           @id @default(autoincrement())
  type           AlertType
  severity       AlertSeverity
  status         AlertStatus   @default(GENERATED)
  title          String
  description    String
  region         String // City/region name like "porbandar", "mumbai"
  state          String // State name like "gujarat", "maharashtra"
  coordinates    Json? // {lat: number, lng: number}
  predictionData Json // Raw sensor/prediction data
  mlPrediction   Float // 0-1 probability score
  thresholdMet   Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  approvedAt     DateTime?
  sentAt         DateTime?

  // Admin who approved/rejected
  reviewedBy   User?   @relation("AlertReviewer", fields: [reviewedById], references: [id])
  reviewedById Int?
  reviewNotes  String?

  // Auto-generated based on conditions
  autoGenerated Boolean @default(true)

  @@index([status, createdAt])
  @@index([state, region, status])
  @@index([type, severity])
  @@index([region, state])
}
