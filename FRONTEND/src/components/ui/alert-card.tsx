"use client";

import { Clock, MapPin, AlertTriangle, CheckCircle, XCircle, User } from "lucide-react";
import { Card, CardContent, CardHeader } from "./card";
import { Badge } from "./badge";
import { Button } from "./button";
import { cn } from "../../lib/utils";

interface AlertCardProps {
    alert: {
        id: number;
        type: "CYCLONE" | "STORM_SURGE" | "COASTAL_EROSION" | "WATER_POLLUTION";
        severity: "LOW" | "MODERATE" | "HIGH" | "EXTREME";
        status: "GENERATED" | "PENDING_APPROVAL" | "APPROVED" | "REJECTED" | "SENT";
        title: string;
        description: string;
        region: string;
        state: string;
        coordinates?: { lat: number; lng: number };
        mlPrediction: number;
        createdAt: string;
        approvedAt?: string;
        sentAt?: string;
        reviewedBy?: {
            firstName: string;
            lastName: string;
            role: string;
        };
        autoGenerated: boolean;
    };
    onApprove?: (id: number) => void;
    onReject?: (id: number) => void;
    isAdmin?: boolean;
}

export function AlertCard({ alert, onApprove, onReject, isAdmin }: AlertCardProps) {
    const severityColors = {
        LOW: "bg-blue-50 text-blue-800 border-blue-200",
        MODERATE: "bg-yellow-50 text-yellow-800 border-yellow-200",
        HIGH: "bg-orange-50 text-orange-800 border-orange-200",
        EXTREME: "bg-red-50 text-red-800 border-red-200",
    };

    const typeColors = {
        CYCLONE: "bg-purple-100 text-purple-800",
        STORM_SURGE: "bg-blue-100 text-blue-800",
        COASTAL_EROSION: "bg-orange-100 text-orange-800",
        WATER_POLLUTION: "bg-green-100 text-green-800",
    };

    const statusIcons = {
        GENERATED: <AlertTriangle className="h-4 w-4 text-yellow-500" />,
        PENDING_APPROVAL: <Clock className="h-4 w-4 text-orange-500" />,
        APPROVED: <CheckCircle className="h-4 w-4 text-green-500" />,
        REJECTED: <XCircle className="h-4 w-4 text-red-500" />,
        SENT: <CheckCircle className="h-4 w-4 text-blue-500" />,
    };

    const formatLocation = (region: string, state: string) => {
        const formattedRegion = region.replace(/_/g, " ").replace(/\b\w/g, l => l.toUpperCase());
        const formattedState = state.replace(/_/g, " ").replace(/\b\w/g, l => l.toUpperCase());
        return `${formattedRegion}, ${formattedState}`;
    };

    const formatType = (type: string) => {
        return type.replace(/_/g, " ").replace(/\b\w/g, l => l.toUpperCase());
    };

    const formatDate = (dateString: string) => {
        return new Date(dateString).toLocaleString();
    };

    const confidencePercentage = Math.round(alert.mlPrediction * 100);

    return (
        <Card className={cn(
            "transition-all duration-200 hover:shadow-lg",
            alert.severity === "EXTREME" && "ring-2 ring-red-200",
            alert.status === "PENDING_APPROVAL" && "ring-2 ring-orange-200"
        )}>
            <CardHeader className="pb-3">
                <div className="flex items-start justify-between gap-4">
                    <div className="flex-1 min-w-0">
                        <div className="flex items-center gap-2 mb-2">
                            {statusIcons[alert.status]}
                            <h3 className="font-semibold text-gray-900 truncate">{alert.title}</h3>
                        </div>

                        <div className="flex items-center gap-2 text-sm text-gray-600 mb-2">
                            <MapPin className="h-4 w-4 flex-shrink-0" />
                            <span className="truncate">{formatLocation(alert.region, alert.state)}</span>
                            {alert.coordinates && (
                                <span className="text-xs text-gray-500">
                                    ({alert.coordinates.lat.toFixed(3)}, {alert.coordinates.lng.toFixed(3)})
                                </span>
                            )}
                        </div>
                    </div>

                    <div className="flex flex-col gap-2 items-end">
                        <Badge className={cn("text-xs", severityColors[alert.severity])}>
                            {alert.severity}
                        </Badge>
                        <Badge variant="outline" className={cn("text-xs", typeColors[alert.type])}>
                            {formatType(alert.type)}
                        </Badge>
                    </div>
                </div>
            </CardHeader>

            <CardContent className="pt-0">
                <p className="text-sm text-gray-700 mb-4 line-clamp-3">{alert.description}</p>

                <div className="flex items-center justify-between text-xs text-gray-500 mb-4">
                    <div className="flex items-center gap-4">
                        <span>Confidence: {confidencePercentage}%</span>
                        <span>Created: {formatDate(alert.createdAt)}</span>
                        {alert.autoGenerated && (
                            <Badge variant="outline" className="text-xs">
                                Auto-generated
                            </Badge>
                        )}
                    </div>
                </div>

                {alert.reviewedBy && (
                    <div className="flex items-center gap-2 text-xs text-gray-600 mb-4">
                        <User className="h-3 w-3" />
                        <span>
                            Reviewed by {alert.reviewedBy.firstName} {alert.reviewedBy.lastName}
                            ({alert.reviewedBy.role})
                        </span>
                        {alert.approvedAt && (
                            <span>on {formatDate(alert.approvedAt)}</span>
                        )}
                    </div>
                )}

                {alert.status === "PENDING_APPROVAL" && isAdmin && (
                    <div className="flex gap-2 mt-4">
                        <Button
                            size="sm"
                            variant="default"
                            onClick={() => onApprove?.(alert.id)}
                            className="flex-1"
                        >
                            <CheckCircle className="h-4 w-4 mr-2" />
                            Approve
                        </Button>
                        <Button
                            size="sm"
                            variant="destructive"
                            onClick={() => onReject?.(alert.id)}
                            className="flex-1"
                        >
                            <XCircle className="h-4 w-4 mr-2" />
                            Reject
                        </Button>
                    </div>
                )}

                {alert.status === "SENT" && alert.sentAt && (
                    <div className="text-xs text-green-600 mt-2">
                        âœ“ Alert sent to subscribers on {formatDate(alert.sentAt)}
                    </div>
                )}
            </CardContent>
        </Card>
    );
}
